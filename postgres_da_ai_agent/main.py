import os
import dotenv
import argparse
from postgres_da_ai_agent.modules.db import PostgresDB
from postgres_da_ai_agent.modules import llm
from autogen import (
    AssistantAgent,
    UserProxyAgent,
    GroupChat,
    GroupChatManager,
    config_list_from_json,
    config_list_from_models,
)


dotenv.load_dotenv()

assert os.environ.get(
    "DATABASE_URL"), "POSTGRES_CONNECTION_URL not found in .env file"
assert os.environ.get(
    "OPENAI_API_KEY"), "OPENAI_API_KEY not found in .env file"

DB_URL = os.environ.get("DATABASE_URL")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")

POSTGRES_TABLE_DEFINITIONS_CAP_REF = "TABLE_DEFINITIONS"
TABLE_RESPONSE_FORMAT_CAP_REF = "TABLE_RESPONSE_FORMAT"

SQL_QUERY_DELIMITER = '-----------'
AGENT_RESULT_DELIMITER = '-------- AGENT RESULT --------'


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--prompt", help="The prompt for the AI model")
    args = parser.parse_args()

    with PostgresDB() as db:
        db.connect_with_url(DB_URL)
        table_definitions = db.get_table_definitions_for_prompt()

    prompt = args.prompt

    prompt = llm.add_cap_ref(
        prompt,
        f"Use this {POSTGRES_TABLE_DEFINITIONS_CAP_REF} to satisfy the database query.",
        POSTGRES_TABLE_DEFINITIONS_CAP_REF,
        table_definitions,
    )

    gpt4_config = {
        "seed": 42,  # change the seed for different trials
        "temperature": 0,
        "config_list": config_list_gpt4,
        "request_timeout": 120,
    }

    admin_user_proxy_agent = autogen.UserProxyAgent(
        name="Admin",
        system_message="Admin user proxy agent - takes the prompt and manages the group chat",
        code_execution_config=False,
    )

    data_engineer_agent = autogen.AssistantAgent(
        name="Data Engineer",
        llm_config=gpt4_config,
        system_message="Data engineer agent - generates the user query",
    )

    sr_data_analyst_agent = autogen.AssistantAgent(
        name="Sr Data Analyst",
        llm_config=gpt4_config,
        system_message="Sr data analyst agent - run the sql query generated by the data engineer agent",
    )

    product_manager_agent = autogen.AssistantAgent(
        name="Product Manager",
        llm_config=gpt4_config,
        system_message="Product manager - validate the response to make sure it is correct",
    )

    groupchat = autogen.GroupChat(agents=[admin_user_proxy_agent, data_engineer_agent, sr_data_analyst_agent, product_manager_agent], messages=[], max_round=50)
    manager = autogen.GroupChatManager(groupchat=groupchat, llm_config=gpt4_config)


if __name__ == "__main__":
    main()
